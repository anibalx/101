Transdutores 
são componentes 
que convertem uma forma de energia ou 
uma grandeza física em outra forma de energia ou grandeza. 
Eles são fundamentais em sistemas de controle, sensores e atuadores.

Por exemplo, 
um transdutor de temperatura 
pode converter a temperatura de um fluido em uma corrente elétrica, 
enquanto um transdutor de pressão 
pode converter a pressão de um fluido em uma força mecânica.

	Transdutores de temperatura (termistores, resistores de temperatura, etc.)
	Transdutores de pressão (válvulas de pressão, sensores de pressão, etc.)
	Transdutores de movimento (sensores de velocidade, sensores de aceleração, etc.)
	Transdutores de luz (fotodiodos, fototransistores, etc.)

Transdutores 
são transformações algorítmicas composíveis. 
Eles são independentes do contexto 
de suas fontes de entrada e saída 
especificam apenas a essência da transformação 
em termos de um elemento individual.


Os transdutores 
são receitas do que fazer 
com uma sequência de dados 
sem saber qual é a sequência subjacente (como fazer). 
Pode ser qualquer canal seq, assíncrono ou talvez observável.

Eles são composíveis e polimórficos.

A vantagem é que 
você não precisa implementar 
todos os combinadores padrão 
sempre que uma nova fonte de dados é adicionada. 
De novo e de novo. 
Como resultado, 
você, 
como usuário, 
pode reutilizar essas receitas em diferentes fontes de dados.


EX Clojure:
é uma função que aplica uma transformação a uma sequência de valores
é usado para transformar a saída de uma função em uma forma diferente, sem alterar a função original.

(defn quadrado [x] (* x x))

(defn transdutor-quadrado [f coll]
  (map f coll))

(transdutor-quadrado quadrado [1 2 3 4 5]) ; retorna [1 4 9 16 25]

      # Chamada aninhada
      (reduce + (filter odd? (map #(+ 2 %) (range 0 10))))


      # Composição Funcional
      (def xform
      (comp
        (partial filter odd?)
        (partial map #(+ 2 %))))
      (reduce + (xform (range 0 10)))


      # Macro Threading
      (defn xform [xs]
      (->> xs
           (map #(+ 2 %))
           (filter odd?)))
      (reduce + (xform (range 0 10)))

      # Com transdutores
      (def xform
      (comp
        (map #(+ 2 %))
        (filter odd?)))
      (transduce xform + (range 0 10))

      (chan 1 xform)

      OBS: 
          você nunca chama os transdutores diretamente, 
          você os passa para outra função. 
          Os transdutores sabem o que fazer, 
          a função que obtém o transdutor sabe como. 
          A ordem dos combinadores é como você escreve 
          com macro de threading (ordem natural)
